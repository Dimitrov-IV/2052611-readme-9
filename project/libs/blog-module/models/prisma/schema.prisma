// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          String     @id @default(uuid()) @db.Uuid
  typeId      String     @map("type_id") @db.Uuid
  type        PostType   @relation(fields: [typeId], references: [id])
  userId      String     @map("user_id") @db.Uuid
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  isPublished Boolean    @map("is_published")
  data        String
  PostTags    PostTags[]
  Comment     Comment[]
  Like        Like[]

  @@map("posts")
}

model PostType {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique
  Post Post[]

  @@map("post_types")
}

model Tag {
  id       String     @id @default(uuid()) @db.Uuid
  name     String     @unique
  PostTags PostTags[]

  @@map("tags")
}

model PostTags {
  postId String @db.Uuid
  tagId  String @db.Uuid
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  postId    String   @db.Uuid
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId    String   @map("user_id") @db.Uuid
  text      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Like {
  postId String @db.Uuid
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId String @map("user_id") @db.Uuid

  @@id([postId, userId])
  @@map("likes")
}
